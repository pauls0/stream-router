Transform: "AWS::Serverless-2016-10-31"
AWSTemplateFormatVersion: 2010-09-09
Description: Stream Router
Metadata: {}
Parameters:
  AdminConsoleRepository:
    Type: String
    Description: GitHub Repository URL
  AdminConsoleBranch:
    Type: String
    Description: Github Repository Branch
  AdminConsoleOauthToken:
    Type: String
    Description: GitHub OauthToken
    NoEcho: true
  AdminConsoleDomain:
    Type: String
    Description: Domain name to host application
    Default: ""
  BucketDepenancies:
    Type: String
    Description: S3 Bucket for stack dependencies, eg lambda function code
  LambdaRouteCodeUriKey:
    Type: String
  LambdaMappingGetCodeUriKey:
    Type: String
  LambdaMappingSetCodeUriKey:
    Type: String
  LambdaSetupCodeUriKey:
    Type: String
  FileUriKeycdirnetwork:
    Type: String
    Default: "cdir-network.ndjson"
  FileUriKeycdnhost:
    Type: String
    Default: "cdn-host.ndjson"
  FileUriKeycdnhostdefaults:
    Type: String
    Default: "cdn-host-defaults.ndjson"
Mappings: {}
Conditions:
  UseCustomDomain: !Not
    - !Equals
      - !Ref AdminConsoleDomain
      - ""
Resources:
  BucketAssets:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${AWS::StackName}-bucket-assets"
  RoleLambda:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-role-lambda"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-lambda-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: RoutePolicy
                Effect: Allow
                Action:
                  - "s3:*" # TODO: remove s3:*
                  - "dynamodb:*" # TODO: remove dynamodb:*
                Resource:
                  - !GetAtt
                    - BucketAssets
                    - Arn
                  - !GetAtt
                    - TableMappings
                    - Arn
                  - !GetAtt
                    - TableCDIRNetwork
                    - Arn
                  - !GetAtt
                    - TableCDNHost
                    - Arn
                  - !GetAtt
                    - TableCDNHostDefaults
                    - Arn
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  LambdaRoute:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 1024
      Timeout: 10
      Role: !GetAtt
        - RoleLambda
        - Arn
      FunctionName: !Sub "${AWS::StackName}-lambda-route"
      CodeUri:
        Bucket: !Ref BucketDepenancies
        Key: !Ref LambdaRouteCodeUriKey
      Events:
        GetRequest:
          Type: Api
          Properties:
            Path: /route
            Method: GET
  LambdaMappingGet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 1024
      Timeout: 10
      Role: !GetAtt
        - RoleLambda
        - Arn
      FunctionName: !Sub "${AWS::StackName}-lambda-mapping-get"
      CodeUri:
        Bucket: !Ref BucketDepenancies
        Key: !Ref LambdaMappingGetCodeUriKey
      Events:
        GetRequest:
          Type: Api
          Properties:
            Path: /mapping-get
            Method: GET
  LambdaMappingSet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 1024
      Timeout: 10
      Role: !GetAtt
        - RoleLambda
        - Arn
      FunctionName: !Sub "${AWS::StackName}-lambda-mapping-set"
      CodeUri:
        Bucket: !Ref BucketDepenancies
        Key: !Ref LambdaMappingSetCodeUriKey
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /mapping-set
            Method: POST
  LambdaSetup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-lambda-setup"
      CodeUri:
        Bucket: !Ref BucketDepenancies
        Key: !Ref LambdaSetupCodeUriKey
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 1024
      Timeout: 10
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - "s3:*" # TODO: remove s3:*
                - "dynamodb:*" # TODO: remove dynamodb:*
              Resource:
                - !GetAtt
                  - BucketAssets
                  - Arn
                - !GetAtt
                  - TableMappings
                  - Arn
                - !GetAtt
                  - TableCDIRNetwork
                  - Arn
                - !GetAtt
                  - TableCDNHost
                  - Arn
                - !GetAtt
                  - TableCDNHostDefaults
                  - Arn
  TableMappings:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${AWS::StackName}-table-mappings"
      AttributeDefinitions:
        - AttributeName: network
          AttributeType: S
      KeySchema:
        - AttributeName: network
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  TableCDIRNetwork:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${AWS::StackName}-table-cdir-network"
      AttributeDefinitions:
        - AttributeName: base
          AttributeType: N
        # - AttributeName: first
        #   AttributeType: N
        # - AttributeName: last
        #   AttributeType: N
        # - AttributeName: network
        #   AttributeType: N
        # - AttributeName: cidr
        #   AttributeType: S
      KeySchema:
        - AttributeName: host
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  TableCDNHost:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${AWS::StackName}-table-cdn-host"
      AttributeDefinitions:
        - AttributeName: cdn
          AttributeType: S
        # - AttributeName: base
        #   AttributeType: N
        # - AttributeName: first
        #   AttributeType: N
        # - AttributeName: last
        #   AttributeType: N
        # - AttributeName: cidr
        #   AttributeType: S
        # - AttributeName: host
        #   AttributeType: S
      KeySchema:
        - AttributeName: cdn
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  TableCDNHostDefaults:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${AWS::StackName}-table-cdn-host-defaults"
      AttributeDefinitions:
        - AttributeName: cdn
          AttributeType: S
        # - AttributeName: host
        #   AttributeType: S
      KeySchema:
        - AttributeName: cdn
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  RoleAmplify:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "amplify:*" # TODO: remove amplify:*
                Resource: "*"
  AmplifyAppAdminConsole:
    Type: "AWS::Amplify::App"
    Properties:
      Name: !Sub "${AWS::StackName}-amplify-app-admin-console"
      Description: Admin Console React App
      Repository: !Ref AdminConsoleRepository
      OauthToken: !Ref AdminConsoleOauthToken
      IAMServiceRole: !GetAtt
        - RoleAmplify
        - Arn
      BuildSpec: |-
        version: 1
        appRoot: /site-admin-console
        frontend:
          phases:
            test:
              commands:
                - yarn test
            preBuild:
              commands:
                - yarn install
            build:
              commands:
                - yarn run build
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
  AmplifyBranchAdminConsole:
    Type: "AWS::Amplify::Branch"
    Properties:
      BranchName: !Ref AdminConsoleBranch
      AppId: !GetAtt
        - AmplifyAppAdminConsole
        - AppId
      EnableAutoBuild: true
  AmplifyDomainAdminConsole:
    Type: "AWS::Amplify::Domain"
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref AdminConsoleDomain
      AppId: !GetAtt
        - AmplifyAppAdminConsole
        - AppId
      SubDomainSettings:
        - Prefix: master
          BranchName: !GetAtt
            - AmplifyBranchAdminConsole
            - BranchName
Outputs:
  DefaultDomain:
    Value: !GetAtt
      - AmplifyAppAdminConsole
      - DefaultDomain
    Condition: UseCustomDomain
